* General Refs
  - https://github.com/zamansky/using-emacs/blob/master/myinit.org
  - https://github.com/jinnovation/dotemacs
  - https://huytd.github.io/emacs-from-scratch.html
* Notes
  - [2017-11-27 Mon] I converted the config to an org file. It is much
    clearer, but the startup time went from 1.5 s to 8.9 s. I will
    keep it, I prefer organization over time. 
* Proxy at work (deprecated)
  Loads proxy config at work.
  DEPRECATED: now it is better to set the proxy credentials from the
  command line (https_proxy etc) and then open emacs
#+BEGIN_SRC emacs-lisp
;; (if  (file-exists-p "~/.emacs_proxy_config")
;;     (load "~/.emacs_proxy_config")
;;   )
#+END_SRC

* Authentication
  #+BEGIN_SRC emacs-lisp
  (setq auth-sources '("~/.authinfo.gpg" "~/.authinfo" "~/.netrc"))
  #+END_SRC

* Server
  Check: https://github.com/youngker/emacs.d/blob/master/init.el#L146
  #+BEGIN_SRC emacs-lisp
  (use-package server
  :ensure t
  :commands server-running-p
  :config
  (unless (server-running-p)
    (server-start)))
;;(load "server")
;;(unless (server-running-p) (server-start))
#+END_SRC

* Variable configurations
** Accept ad-redefinition warnings
   from : http://andrewjamesjohnson.com/suppressing-ad-handle-definition-warnings-in-emacs/
   #+BEGIN_SRC emacs-lisp
   (setq ad-redefinition-action 'accept)
   #+END_SRC
** Add path to find executables
#+BEGIN_SRC emacs-lisp
(add-to-list 'exec-path "/usr/local/bin/")
(add-to-list 'exec-path "/Library/TeX/texbin/")
;;(add-to-list 'exec-path "/Users/oquendo/anaconda2/bin/")
#+END_SRC
** Some other config
   #+BEGIN_SRC emacs-lisp
   (fset 'yes-or-no-p 'y-or-n-p)
   (global-set-key (kbd "<f5>") 'revert-buffer)
   
;; GENERAL CONFIG TO AVOID USING .emacs
(add-to-list 'load-path "~/.emacs.d/lisp")
(display-time-mode 1)
(display-battery-mode 1)
(tool-bar-mode -1)
(setq inhibit-startup-message t)
(setq inhibit-splash-screen t); Disable splash screen
(setq show-trailing-whitespace t)
(setq longlines-show-hard-newlines t) ; displays "\" at the end of lines that wrap past the window's edge"
(setq suggest-key-bindings t)
(setq vc-follow-symlinks t) ;; https://www.gnu.org/software/emacs/manual/html_node/emacs/General-VC-Options.html
;; complete file name : Better try to use helm complete file name?
(autoload 'comint-dynamic-complete-filename "comint" nil t)
(global-set-key "\M-]" 'comint-dynamic-complete-filename)
(setq visible-bell t); Flashes on error
(setq calendar-week-start-day 1); Calendar should start on Monday
;; camel case word navigation
(when (boundp 'subword-mode)
  (add-hook 'after-change-major-mode-hook '(lambda () (subword-mode 1))))
(setq enable-local-variables :safe)
(setq byte-compile-verbose nil)
(setq comment-column 80)
(setq compile-command "g++")
(setq delete-selection-mode t)
(setq keyboard-coding-system (quote utf-8-unix))
(setq osx-clipboard-mode t)
(delete-selection-mode 1)
;; syntax highlight everywhere
(global-font-lock-mode t)
(transient-mark-mode t)
(setq woman-locale "en_US.UTF-8")
;; confirm exit
(when window-system
  (add-hook 'kill-emacs-query-functions
	    (lambda () (y-or-n-p "Do you really want to exit Emacs? "))
	    'append) )
;; allow to write y or n instead of yes or no
(fset 'yes-or-no-p 'y-or-n-p)
;; reload file
;;(global-set-key [(control c) r] 'revert-buffer)
(global-set-key (kbd "C-c r") 'revert-buffer)
;; all indent in spaces
(setq indent-tabs-mode nil)
;; compilation mode
(setq compilation-scroll-output 'first-error)

;; from http://zeekat.nl/articles/making-emacs-work-for-me.html
(when (not (window-system))
  (xterm-mouse-mode +1))
;; Oppening compressed files
(auto-compression-mode 1)

;; save command history
(setq savehist-additional-variables    ;; also save...
      '(kill-ring search-ring regexp-search-ring))    ;; ... my search entries
(setq savehist-file "~/.emacs.d/savehist") ;; keep my home clean
(savehist-mode 1) ;; customize and THEN activate mode

;; ibuffer mode
;;(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)

;; utf 8 support
(prefer-coding-system 'utf-8)
(when (display-graphic-p)
  (setq x-select-request-type '(UTF8_STRING COMPOUND_TEXT TEXT STRING)))
;;(set-terminal-coding-system 'utf-8)
;;(set-keyboard-coding-system 'utf-8)
;;(prefer-coding-system 'utf-8)

;; occur mode
(global-set-key (kbd "C-c o") 'occur)
   #+END_SRC
   
** Integrate copy/paste with X
   #+BEGIN_SRC emacs-lisp
(setq x-select-enable-clipboard t)
;;(setq interprogram-paste-function 'x-cut-buffer-or-selection-value)   
   #+END_SRC

** Abbreviations
#+BEGIN_SRC emacs-lisp
;; ===== Automatically load abbreviations table =====
;; Note that emacs chooses, by default, the filename
;; "~/.abbrev_defs", so don't try to be too clever
;; by changing its name
;; from https://github.com/manuel-uberti/.emacs.d/blob/master/lisp/mu-completion.el
;;(use-package abbrev                     ; Save abbreviations
;;  :init (abbrev-mode)
;;  :config (setq save-abbrevs t))

(use-package dabbrev                    ; Dynamic abbreviations
  :bind* (("C-." . dabbrev-completion)
("C-," . dabbrev-expand)))
#+END_SRC

** Mac os X specific
   #+BEGIN_SRC emacs-lisp
   ;;(add-to-list 'ido-ignore-files "\\.DS_Store")
   #+END_SRC
   #+BEGIN_SRC emacs-lisp
   ;;from: https://github.com/mitchty/dotfiles/blob/master/emacs/.emacs.d/emacs.org#python-mode
   ;;os detection
   (defvar on-mswindows (string-match "windows" (symbol-name system-type))
   "Am I running under windows?")
   (defvar on-osx (string-match "darwin" (symbol-name system-type))
   "Am I running under osx?")
   (defvar on-linux (string-match "gnu/linux" (symbol-name system-type))
   "Am I running under linux?")
   ;;;;exec-path-from-shell
   ;;(use-package exec-path-from-shell
   ;;:ensure t
   ;;:init (if on-osx (exec-path-from-shell-initialize))
   ;;)
   ;;osx-clipboard-mode
   (when on-osx
   (use-package osx-clipboard
   :config
   (progn
   (osx-clipboard-mode +1)
   )
   )
   ;;; Option and meta modifiers
   ;;(setq mac-command-key-is-meta nil)
   ;(setq mac-option-key-is-meta nil)
   ;;(setq mac-option-modifier 'meta)
   ;;(setq mac-command-modifier 'meta)
   ;(setq mac-option-modifier nil)
   ;(setq ns-function-modifier 'hyper)
   (setq ns-alternate-modifier 'meta)
   (setq ns-right-alternate-modifier 'none)
   )
   #+END_SRC

** Line by line scrolling
   #+BEGIN_SRC emacs-lisp
;; ========== Line by line scrolling ==========
;; This makes the buffer scroll by only a single line when the up or
;; down cursor keys push the cursor (tool-bar-mode) outside the
;; buffer. The standard emacs behaviour is to reposition the cursor in
;; the center of the screen, but this can make the scrolling confusing
(setq scroll-step 1)   
   #+END_SRC

** Speed up scrolling
   #+BEGIN_SRC emacs-lisp
   (setq auto-window-vscroll nil)   
   #+END_SRC
** emacs backup
   #+BEGIN_SRC emacs-lisp
   ;; ========== Prevent Emacs from making backup files ==========
;;(setq make-backup-files nil)
;; ========== Place Backup Files in Specific Directory ==========
;; Enable backup files.
(setq make-backup-files t)
;; Save all backup file in this directory.
(setq backup-directory-alist (quote ((".*" . "~/.emacs_backups/"))))
;; Enable versioning with default values (keep five last versions, I think!)
(setq version-control t)
(setq delete-old-versions t)
(setq kept-new-versions 6)
(setq kept-old-versions 2)
   #+END_SRC


** Fix tmux and emacs arrow problem
   Ref: http://stackoverflow.com/questions/4548106/screen-somehow-unmaps-my-arrow-keys-in-emacs-after-a-z
   #+BEGIN_SRC emacs-lisp
   (define-key function-key-map "\eOA" [up])
(define-key function-key-map "\e[A" [up])
(define-key function-key-map "\eOB" [down])
(define-key function-key-map "\e[B" [down])
(define-key function-key-map "\eOC" [right])
(define-key function-key-map "\e[C" [right])
(define-key function-key-map "\eOD" [left])
(define-key function-key-map "\e[D" [left])
   #+END_SRC

* Autocompile
  See: https://github.com/youngker/emacs.d/blob/master/init.el#L153
  #+BEGIN_SRC emacs-lisp
(use-package auto-compile
  :commands (auto-compile-on-load-mode
             auto-compile-on-save-mode)
  :config
  (setq load-prefer-newer t)
  (auto-compile-on-load-mode)
(auto-compile-on-save-mode))
 #+END_SRC

* Treemacs
  #+BEGIN_SRC emacs-lisp
  (use-package treemacs
  :ensure t
  )
  #+END_SRC

* Modeline
** [DEACTIVATED] power line
  #+BEGIN_SRC emacs-lisp :exports none
  (use-package powerline
  :defer t
  :config
  (powerline-center-theme)
  ;;(powerline-default-theme)
  )  
  #+END_SRC
** Spaceline
  #+BEGIN_SRC emacs-lisp
  (use-package spaceline
  :ensure t
  )
  #+END_SRC
* Hydra
  Check : https://github.com/nasseralkmim/.emacs.d/blob/master/init.el#L631
  #+BEGIN_SRC emacs-lisp
(use-package hydra
  :ensure t
  :bind
  (("C-c C-w" . hydra-window-resize/body)
   ("C-x C-o" . hydra-outline/body)
   ("C-x C-m " . multiple-cursors-hydra/body))
  ;; :config
  ;; (require 'hydra-examples)
  ;; (hydra-create "<f2>"
  ;; 		'(("g" text-scale-increase)
  ;; 		  ("l" text-scale-decrease)))
  :config
  (defun my-funcs/resize-window-down ()
    "Resize a window downwards."
    (interactive)
    (if (window-in-direction 'below)
        (enlarge-window 1)
      (shrink-window 1)))
  (defun my-funcs/resize-window-up ()
    "Resize a window upwards."
    (interactive)
    (if (window-in-direction 'above)
        (enlarge-window 1)
      (shrink-window 1)))
  (defun my-funcs/resize-window-left ()
    "Resize a window leftwards."
    (interactive)
    (if (window-in-direction 'left)
        (enlarge-window-horizontally 1)
      (shrink-window-horizontally 1)))
  (defun my-funcs/resize-window-right ()
    "Resize a window rightwards."
    (interactive)
    (if (window-in-direction 'right)
        (enlarge-window-horizontally 1)
      (shrink-window-horizontally 1)))
  (defhydra hydra-window-resize (global-map "C-c w")
    "Window resizing"
    ("j" my-funcs/resize-window-down "down")
    ("k" my-funcs/resize-window-up "up")
    ("l" my-funcs/resize-window-right "right")
    ("h" my-funcs/resize-window-left "left"))
  (defhydra hydra-outline (:color pink :hint nil)
    "
 ^Hide^             ^Show^           ^Move
 ^^^^^^------------------------------------------------------
 _q_: sublevels     _a_: all         _u_: up
 _t_: body          _e_: entry       _n_: next visible
 _o_: other         _i_: children    _p_: previous visible
 _c_: entry         _k_: branches    _f_: forward same level
 _l_: leaves        _s_: subtree     _b_: backward same level
 _d_: subtree   _<tab>_: cycle
 "
    ;; Hide
    ("q" hide-sublevels)  ; Hide everything but the top-level headings
    ("t" hide-body)    ; Hide everything but headings (all body lines)
    ("o" hide-other)   ; Hide other branches
    ("c" hide-entry)   ; Hide this entry's body
    ("l" hide-leaves)  ; Hide body lines in this entry and sub-entries
    ("d" hide-subtree) ; Hide everything in this entry and sub-entries
    ;; Show
    ("a" show-all)                      ; Show (expand) everything
    ("e" show-entry)                    ; Show this heading's body
    ("i" show-children) ; Show this heading's immediate child sub-headings
    ("k" show-branches) ; Show all sub-headings under this heading
    ("s" show-subtree) ; Show (expand) everything in this heading & below
    ("<tab>" org-cycle)
    ;; Move
    ("u" outline-up-heading)               ; Up
    ("n" outline-next-visible-heading)     ; Next
    ("p" outline-previous-visible-heading) ; Previous
    ("f" outline-forward-same-level)       ; Forward - same level
    ("b" outline-backward-same-level)      ; Backward - same level
    ("z" nil "leave"))
  
  (defhydra multiple-cursors-hydra (:hint nil)
    "
      ^Up^            ^Down^        ^Other^
 ----------------------------------------------
 [_p_]   Next    [_n_]   Next    [_l_] Edit lines
 [_P_]   Skip    [_N_]   Skip    [_a_] Mark all
 [_M-p_] Unmark  [_M-n_] Unmark  [_r_] Mark by regexp
 ^ ^             ^ ^             [_q_] Quit
 "
    ("l" mc/edit-lines :exit t)
    ("a" mc/mark-all-like-this :exit t)
    ("n" mc/mark-next-like-this)
    ("N" mc/skip-to-next-like-this)
    ("M-n" mc/unmark-next-like-this)
    ("p" mc/mark-previous-like-this)
    ("P" mc/skip-to-previous-like-this)
    ("M-p" mc/unmark-previous-like-this)
    ("r" mc/mark-all-in-region-regexp :exit t)
    ("q" nil))
  )
#+END_SRC

* dired+, from : http://cestlaz.github.io/posts/using-emacs-38-dired/#.Whg1B1Hdxcw.reddit
  #+BEGIN_SRC emacs-lisp
  ;;(use-package dired+
  ;;:ensure t
  ;;:config (require 'dired+)
 ;; )
  #+END_SRC
* Regex without much scapes
  #+BEGIN_SRC emacs-lisp
  (use-package pcre2el
  :ensure t
  :config 
  (pcre-mode)
  )
  #+END_SRC

* Linum mode : Line number
** nlinum: Much faster than linum
  #+BEGIN_SRC emacs-lisp
(use-package nlinum
  :ensure t
  :config 
  (global-nlinum-mode 1)
  )
  #+END_SRC

** Linum mode: Dot not use, is very slow for large files  
  # #+BEGIN_SRC emacs-lisp
  # ;;(when window-system
  # ;; linum is versy slow with large files
  # ;;(use-package linum
  # ;;  :defer 2
  # ;;  :config
  # ;;  (line-number-mode 1)
  # ;;  (column-number-mode 1)
  # ;;  (global-linum-mode 1)
  # ;;  (setq linum-format "%3d \u2502 ")
  # ;;  )
  # ;;)
  # #+END_SRC
** Old manual config, not so adaptable
  # #+BEGIN_SRC emacs-lisp
  # ;;(global-hl-line-mode 1)
  # ;; config fringe
  # ;;(fringe-mode 4) ;; both left and right 4 pixels
  # ;;(fringe-mode '(4 . 0)) ;; left 4 pixels, right dissapears
  # ;;(set-window-margins nil 1) ;; add a margin
  # #+END_SRC
* winner-mode lets you use C-c <left> and C-c <right> to switch between window configurations\
  #+BEGIN_SRC emacs-lisp
(use-package winner
  :defer t)  
  #+END_SRC

* [DEACTIVATED] Agressive indent
#   #+BEGIN_SRC emacs-lisp  
# (use-package aggressive-indent
#   :defer 1
#   :config
#   ;;(global-aggressive-indent-mode 1)
#   (add-hook 'emacs-lisp-mode-hook #'aggressive-indent-mode)
#   (add-hook 'css-mode-hook #'aggressive-indent-mode)
#   ;; (add-hook 'org-mode-hook #'aggressive-indent-mode) ;; does not help when creating new sections
#   (add-hook 'prog-mode-hook #'aggressive-indent-mode)
#   (add-hook 'LaTeX-mode-hook #'aggressive-indent-mode)
#   )
#   #+END_SRC

* Code folding
  From :
  https://github.com/mwfogleman/.emacs.d/blob/master/michael.org#hideshow
  #+BEGIN_SRC emacs-lisp
  (use-package hideshow
  :hook ((prog-mode . hs-minor-mode)))

  (defun toggle-fold ()
  (interactive)
  (save-excursion
   (end-of-line)
    (hs-toggle-hiding)))
  #+END_SRC
* Recent file mode
  #+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (setq recentf-max-saved-items 500)
  (setq recentf-max-menu-items 15)
  (global-set-key "\C-x\ \C-r" 'recentf-open-files)
  ;; disable recentf-cleanup on Emacs start, because it can cause
  ;; problems with remote files
  (setq recentf-auto-cleanup 'never)
  (recentf-mode +1)
  )
  
  #+END_SRC


* Beacon: flashes the cursor's line when you scroll
  From : http://cestlaz.github.io/posts/using-emacs-17-misc/#.WBUKRpMrKHp
  #+BEGIN_SRC emacs-lisp
  (use-package beacon
  :defer 2
  :config
  (beacon-mode 1)
  ;; this color looks good for the zenburn theme but not for the one
  ;; I'm using for the videos
  ;; (setq beacon-color "#666600")
  )
  #+END_SRC

* Expand Region
  expand the marked region in semantic increments (negative prefix to reduce region)
  #+BEGIN_SRC emacs-lisp
  (use-package expand-region
  :ensure t
  :config 
  (global-set-key (kbd "C-=") 'er/expand-region))
  #+END_SRC
* [DEACTIVATED - too much hungry] Hungry delete: deletes all the whitespace when you hit backspace or delete
  #+BEGIN_SRC emacs-lisp
;(use-package hungry-delete
;  :ensure t
;  :config
;  (global-hungry-delete-mode))  
  #+END_SRC

* File modes (like gnuplot, povray, etc)
** Gnuplot mode
#+BEGIN_SRC emacs-lisp
(use-package gnuplot
  :config
  (autoload 'guplot-make-buffer "gnuplot" "open a buffer in gnuplot-mode" t)
  :mode (("\\.gp$" . gnuplot-mode)
	 ("\\.gnu$" . gnuplot-mode))
  )
#+END_SRC

** Povray mode
  #+BEGIN_SRC emacs-lisp
  (use-package pov-mode
  :mode (("\\.pov$" . pov-mode)
	 ("\\.inc$" . pov-mode))
  )
  #+END_SRC

** Python mode
  #+BEGIN_SRC emacs-lisp
(use-package python
  :mode (("\\.py$" . python-mode))
  :interpreter ("python" . python-mode)
  :config
  (setq python-indent-offset 4)
  )  
  #+END_SRC

** Cuda mode
  #+BEGIN_SRC emacs-lisp
  (use-package cuda-mode
  :mode (("\\.cu$" . cuda-mode))
  )
  #+END_SRC

** Yaml-mode
  #+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
  :mode (("\\.yml$" . rst-mode)
	 ("\\.yaml$" . rst-mode))
  :config
  (add-hook 'yaml-mode-hook
	    '(lambda ()
	       (define-key yaml-mode-map "\C-m" 'newline-and-indent)))
  )
  #+END_SRC

** conf mode
  #+BEGIN_SRC emacs-lisp
  (use-package conf-mode
  :mode
  (;; systemd
   ("\\.service\\'"     . conf-unix-mode)
   ("\\.timer\\'"      . conf-unix-mode)
   ("\\.target\\'"     . conf-unix-mode)
   ("\\.mount\\'"      . conf-unix-mode)
   ("\\.automount\\'"  . conf-unix-mode)
   ("\\.slice\\'"      . conf-unix-mode)
   ("\\.socket\\'"     . conf-unix-mode)
   ("\\.path\\'"       . conf-unix-mode)
   ;; general
   ("conf\\(ig\\)?$"   . conf-mode)
   ("rc$"              . conf-mode))
  )
  #+END_SRC

* Windmove: To move between windows
  #+BEGIN_SRC emacs-lisp
  (use-package windmove
  :bind
  (("<f2> <right>" . windmove-right)
   ("<f2> <left>" . windmove-left)
   ("<f2> <up>" . windmove-up)
   ("<f2> <down>" . windmove-down)
   )
  :config
  ;; use shift + arrow keys to switch between visible buffers
  (windmove-default-keybindings)
  ;;(global-set-key (kbd "<M-up>") 'windmove-up)
  ;;(global-set-key (kbd "<M-down>") 'windmove-down)
  ;;(global-set-key (kbd "<M-left>") 'windmove-left)
  ;;(global-set-key (kbd "<M-right>") 'windmove-right)
  ;; (global-set-key ((kbd "") "S-C-<left>") 'shrink-window-horizontally)
  ;; (global-set-key (kbd "S-C-<right>") 'enlarge-window-horizontally)
  ;; (global-set-key (kbd "S-C-<down>") 'shrink-window)
  ;; (global-set-key (kbd "S-C-<up>") 'enlarge-window)
  (global-set-key (kbd "C-c <left>")  'windmove-left)
  (global-set-key (kbd "C-c <right>") 'windmove-right)
  (global-set-key (kbd "C-c <up>")    'windmove-up)
  (global-set-key (kbd "C-c <down>")  'windmove-down)
  )
  #+END_SRC
  
* Fill column indicator
  #+BEGIN_SRC emacs-lisp
  ;; (use-package fill-column-indicator
;;   :config
;;   (setq fci-rule-width 10)
;;   (setq fci-rule-color "darkblue")
;;   (add-hook 'prog-mode-hook #'fci-mode)
;;   (add-hook 'rst-mode-hook #'fci-mode)
;;   )
  #+END_SRC

* Org mode
** General
  #+BEGIN_SRC emacs-lisp
(use-package org
  :mode (("\\.org$" . org-mode)
	 ("\\.txt$" . org-mode))
  :commands (org-mode org-capture-mode)
  :ensure org-plus-contrib
  :config
  ;; org agenda refile : see https://blog.aaronbieber.com/2017/03/19/organizing-notes-with-refile.html
  (require 'ox-bibtex)
  (setq org-refile-targets '((org-agenda-files :maxlevel . 6)))
  (setq org-refile-allow-creating-parent-nodes 'confirm)
  (setq org-completion-use-ido nil)
  (setq org-outline-path-complete-in-steps nil)
  (setq org-refile-use-outline-path t)                  ; Show full paths for refiling
  ;; org babel
  (org-babel-do-load-languages
   'org-babel-load-languages '((C . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages
   '((makefile . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((js . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((shell . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((ditaa . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((dot . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((latex . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((gnuplot . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((python . t)))
  (org-babel-do-load-languages
   'org-babel-load-languages '((calc . t)))
  (setq org-src-fontify-natively t)
  (defun my-org-confirm-babel-evaluate (lang body)
    (not (member lang '("cpp" "shell" "C" "gnuplot"))))
  (setq org-confirm-babel-evaluate 'my-org-confirm-babel-evaluate)
  (defvar org-babel-C-compiler "gcc-5"
    "Command used to compile a C source code file into an
executable.")
  (defvar org-babel-C++-compiler "g++-5"
    "Command used to compile a C++ source code file into an
executable.")
  (add-hook 'org-mode-hook 
	    \t  (lambda ()
		  \t    'turn-on-font-lock
		  \t    (setq word-wrap 1)
		  \t    (setq truncate-lines nil)
		  \t    (flyspell-mode 1)))
  ;;(add-hook 'org-mode-hook 'wc-mode)
  ;; indent mode: https://github.com/syl20bnr/spacemacs/issues/7290
  ;; (setq org-startup-indented t)
  ;; (setq org-indent-mode t)
  (add-hook 'org-mode-hook 'turn-on-auto-fill)
  (setq org-latex-image-default-width ".45\\textwidth")
  (setq org-latex-images-centered nil)
  (setq org-latex-listings 'minted) ;; colored latex 
  (setq org-src-preserve-indentation t) ;; for preserving indentation when tangling
  (add-to-list 'org-latex-packages-alist '("" "minted"))
  (setq org-latex-minted-options
	'(("frame" "lines")
	  ("fontsize" "\\scriptsize")
	  ;;("linenos" "true")
	  ("bgcolor" "Wheat!15")
	  ("escapeinside" "||")
	  ("breaklines" "true")
	  ("breakanywhere" "true")
	  ("bgcolor" "Wheat!15")
	  ("mathescape" "")))
  (setq org-list-allow-alphabetical 't)
  ;;(setenv "PDFLATEX" "pdflatex --shell-escape")
  ;;(setq org-latex-pdf-process ("latexmk -f -pdf %f"))
  ;;(setq org-latex-pdf-process ("pdflatex --shell-escape %f"))
  (setq org-latex-pdf-process '("latexmk -pdflatex='pdflatex -shell-escape  -interaction nonstopmode' -pdf -bibtex -f %f"))
  (setq org-latex-to-pdf-process '("latexmk -pdflatex='pdflatex -shell-escape  -interaction nonstopmode' -pdf -bibtex -f %f"))
  (setq org-todo-keywords '((sequence "TODO" "ONGOING" "WAIT"  "|" "DONE" )))
  (defun my-org-mode-hook ()
    (auto-fill-mode)
    (electric-indent-mode)
    (flyspell-mode))
  (add-hook 'org-mode-hook 'my-org-mode-hook)
  (setq org-log-done 'time)
  (setq org-clock-persist 'history)
  (setq org-deadline-warning-days 21) ;; default value is 14
  (org-clock-persistence-insinuate)
  ;;(autopair-global-mode 1)
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-cc" 'org-capture)
  (define-key global-map "\C-ca" 'org-agenda)
  ;;(setq org-pretty-entities t)
  (setq org-directory "~/Dropbox/TODO/")
  (setq org-default-notes-file (concat org-directory "~/Dropbox/TODO/TODO.org"))
  (setq org-capture-templates
	'(("t" "Todo" entry (file+headline "~/Dropbox/TODO/TODO.org" "Tasks")
	   "* TODO %?\nEntered on %U\n %i\n  %a")
	  ("n" "Note" entry (file+headline "~/Dropbox/TODO/NOTES.org" "Notes")
	   "* %?\nEntered on %U\n %i\n  %a")
	  ("j" "Journal" entry (file+datetree "~/Dropbox/TODO/journal.org")
	   "* %?\nEntered on %U\n  %i\n  %a")))
  (setq org-agenda-files (list "~/Dropbox/TODO/TODO.org"
			       "~/Dropbox/TODO/TODO-orgcaldav.org"
			       "~/Dropbox/TODO/calendars/"
			       ;;"~/Dropbox/TODO/calendars/woquendo.org"
			        ;;"~/Dropbox/TODO/calendars/health.org"
			        ;;"~/Dropbox/TODO/calendars/teaching.org"
			       ))
  ;; (add-to-list 'org-export-latex-classes
  ;;         '("koma-article"
  ;;            "\\documentclass{scrartcl}"
  ;;            ("\\section{%s}" . "\\section*{%s}")
  ;;            ("\\subsection{%s}" . "\\subsection*{%s}")
  ;;            ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
  ;;            ("\\paragraph{%s}" . "\\paragraph*{%s}")
  ;;            ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
  ;; (setq org-agenda-custom-commands
  ;; 	'(("h" "Daily habits"
  ;; 	   ((agenda ""))
  ;; 	   ((org-agenda-show-log t)
  ;; 	    (org-agenda-ndays 7)
  ;; 	    (org-agenda-log-mode-items '(state))
  ;; 	    (org-agenda-skip-function '(org-agenda-skip-entry-if 'notregexp ":DAILY:"))))
  ;; 	  ;; other commands here
  ;; 	  ))
  (setf (nth 4 org-emphasis-regexp-components) 4)
  ;; skeleton : http://orgmode.org/worg/org-contrib/babel/how-to-use-Org-Babel-for-R.html
  (define-skeleton org-skeleton
  "Header info for a emacs-org file."
  "Title: "
  "#+TITLE:" str " \n"
  "#+AUTHOR: Your Name\n"
  "#+email: your-email@server.com\n"
  "#+INFOJS_OPT: \n"
  "#+BABEL: :session *R* :cache yes :results output graphics :exports both :tangle yes \n"
  "-----"
  )
  (global-set-key [C-S-f4] 'org-skeleton)
  )
;;(set 'org-file-apps '((auto-mode . emacs) ... ("\\.pdf\\'" . default)))
;; org habits
;;(require 'org-habit)
; fix export to latex and scaping { ; from http://tex.stackexchange.com/questions/186605/with-orgtbl-how-to-ensure-that-braces-and-dollars-are-not-escaped
(defun orgtbl-to-latex-verbatim (table params)
  "Convert the Orgtbl mode TABLE to LaTeX."
  (let* ((alignment (mapconcat (lambda (x) (if x "r" "l"))
			       org-table-last-alignment ""))
	 (params2
	  (list
	   :tstart (concat "\\begin{tabular}{" alignment "}")
	   :tend "\\end{tabular}"
	   :lstart "" :lend " \\\\" :sep " & "
	   :efmt "%s\\,(%s)" :hline "\\hline")))
    (orgtbl-to-generic table (org-combine-plists params2 params))))  
  #+END_SRC

** Org bullets
  #+BEGIN_SRC emacs-lisp
  (use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
  )
  #+END_SRC

** Org journal
   Based on
   https://www.reddit.com/r/emacs/comments/8kz8dv/tip_how_i_use_orgjournal_to_improve_my/
   #+BEGIN_SRC emacs-lisp
;; (use-package org-journal
;;   :bind (("C-c t" . journal-file-today)
;; 	 ("C-c y" . journal-file-yesterday))
;;   :custom
;;   ;; (org-journal-dir "~/Sync/shared/.journal/2018/")
;;   (org-journal-dir "~/Dropbox/TODO/journal/2018/")
;;   (org-journal-file-format "%Y%m%d")
;;   (org-journal-date-format "%e %b %Y (%A)")
;;   (org-journal-time-format "")
;;   :preface
;;   (defun get-journal-file-today ()
;;     "Gets filename for today's journal entry."
;;     (let ((daily-name (format-time-string "%Y%m%d")))
;;       (expand-file-name (concat org-journal-dir daily-name))))

;;   (defun journal-file-today ()
;;     "Creates and load a journal file based on today's date."
;;     (interactive)
;;     (find-file (get-journal-file-today)))

;;   (defun get-journal-file-yesterday ()
;;     "Gets filename for yesterday's journal entry."
;;     (let* ((yesterday (time-subtract (current-time) (days-to-time 1)))
;; 	   (daily-name (format-time-string "%Y%m%d" yesterday)))
;;       (expand-file-name (concat org-journal-dir daily-name))))

;;   (defun journal-file-yesterday ()
;;     "Creates and load a file based on yesterday's date."
;;     (interactive)
;;     (find-file (get-journal-file-yesterday)))

   #+END_SRC

** [DEACTIVATED] Org pomodoro
  #+BEGIN_SRC emacs-lisp
;; ;; org pomodoro
;; (use-package org-pomodoro
;;   :ensure t
;;   :commands (org-pomodoro)
;;   :config
;;   (setq alert-user-configuration (quote ((((:category . "org-pomodoro")) libnotify nil)))))  
  #+END_SRC

** Org-gcal 
   I need to find a way to store the password authenticated
  #+BEGIN_SRC emacs-lisp
;; ;; check http://cestlaz.github.io/posts/using-emacs-26-gcal/#.WG52MOtj0wE.reddit
;;(if  (file-exists-p "~/.emacs_gcal_config")
;;     (load "~/.emacs_gcal_config")
;;   )


;; org-gcal : http://cestlaz.github.io/posts/using-emacs-26-gcal/#.WIyKvLYrKHq
(setq package-check-signature nil)
(use-package org-gcal
  :ensure t
  :config
  (setq org-gcal-client-id "273459534032-kg8hhko56k6ocdllq4o160ate814lfka.apps.googleusercontent.com"
	org-gcal-client-secret "eIIRlNzHlAIHpZILDX2UNCbP"
	;; org-gcal-file-alist '(("woquendo@gmail.com" .  "~/Dropbox/TODO/TODO-orgcaldav.org"))))
	org-gcal-file-alist '(("bpmt8bcae6f2ps7hkuqrc4qn1k@group.calendar.google.com" .  "~/Dropbox/TODO/TODO-orgcaldav.org")
			      ("woquendo@gmail.com" . "~/Dropbox/TODO/calendars/woquendo.org")
			      ("vpo53nvma5tv0m1tmnnes7md1o@group.calendar.google.com"  . "~/Dropbox/TODO/calendars/teaching.org")
			      ("grjolnj9vhevmhu6oq3fabla68@group.calendar.google.com"  . "~/Dropbox/TODO/calendars/health.org")
			      )))
(add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
(add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
(setq epa-pinentry-mode 'loopback) ;; see https://colinxy.github.io/software-installation/2016/09/24/emacs25-easypg-issue.html
  
  #+END_SRC

** Org-caldav [DEACTIVATED]
   ERROR: Ask too much for authentication
   I need to find a way to store the password authenticated
  #+BEGIN_SRC emacs-lisp
;; (setq package-check-signature nil)
;; (use-package org-caldav
;;   :ensure t
;;   :config
;;   (setq org-caldav-url "https://calendar.google.com/calendar/dav"
;; 	org-caldav-calendar-id "bpmt8bcae6f2ps7hkuqrc4qn1k@group.calendar.google.co"
;;         org-caldav-oauth2-client-id "273459534032-kg8hhko56k6ocdllq4o160ate814lfka.apps.googleusercontent.com"
;;         org-caldav-oauth2-client-secret "eIIRlNzHlAIHpZILDX2UNCbP"
;; 	org-caldav-inbox (expand-file-name "~/Dropbox/TODO/TODO-orgcaldav.org")
;; 	org-caldav-files '("~/Dropbox/TODO/TODO.org")
;; 	)
;;   )
;; (add-hook 'org-agenda-mode-hook (lambda () (org-gcal-sync) ))
;; (add-hook 'org-capture-after-finalize-hook (lambda () (org-gcal-sync) ))
;; (require 'plstore)
;; (setq plstore-cache-passphrase-for-symmetric-encryption t)  
;; (setq vc-handled-backends nil)
  #+END_SRC

** [DEACTIVATED] Org reveal
   This allows to export org reveal expos.
   I actually prefer the pdf
   #+BEGIN_SRC emacs-lisp
   ;;(use-package ox-reveal
   ;;  :ensure t
   ;;  )
   ;; from http://cestlaz.github.io/posts/using-emacs-11-reveal/
   ;; (use-package ox-reveal
   ;; :ensure ox-reveal)
   ;; (setq org-reveal-root "http://cdn.jsdelivr.net/reveal.js/3.0.0/")
   ;; (setq org-reveal-mathjax t)
   ;; (use-package htmlize
   ;; :ensure t)
   ;; (require 'ox-reveal)
   #+END_SRC
** Org-tempo to get easy templaes in org mode 9.2
   #+BEGIN_SRC emacs-lisp
   (require 'org-tempo)
   #+END_SRC

** Org-ref
   #+BEGIN_SRC emacs-lisp
   ;;(use-package org-ref
   ;;:after org
   ;;)
   #+END_SRC
** Ox-bibtex   
   #+BEGIN_SRC emacs-lisp
   ;;(use-package org-plus-contrib
   ;;:after org)
   ;;(use-package ox-bibtex
   ;;:load-path "~/.emacs.d/lisp/"
   ;;:after org
   ;;)
   #+END_SRC
* [DEACTIVATED] EasyPG
  #+BEGIN_SRC emacs-lisp
;; (use-package epg
;;   :config 
;;   ;;(require 'epa-file)
;;   ;;(epa-file-enable)
;;   )  
  #+END_SRC

* Try package, to try packages without installing
  #+BEGIN_SRC emacs-lisp
(use-package try
	:ensure t)
  #+END_SRC
* Completion
** posframe
   #+BEGIN_SRC emacs-lisp
(use-package posframe 
        :ensure t)
   #+END_SRC
** autocomplete
   #+BEGIN_SRC emacs-lisp
   (use-package auto-complete 
:ensure t
:init
(progn
(ac-config-default)
  (global-auto-complete-mode t)
 ))
   #+END_SRC
** yasnippet
from: http://howardism.org/Technical/Emacs/templates-tutorial.html
#+BEGIN_SRC emacs-lisp
;; From  https://github.com/manuel-uberti/.emacs.d/blob/master/lisp/mu-completion.el
(use-package yasnippet                  ; Snippets
  :ensure t
  :config
  (setq yas-verbosity 1
        yas-wrap-around-region t)
  (yas-reload-all)
  (yas-global-mode)
  :init
  (yas-global-mode 1))

(use-package yasnippet-snippets
  :ensure t
  )
#+END_SRC

** Hippie expand
   #+BEGIN_SRC emacs-lisp
;; From https://github.com/manuel-uberti/.emacs.d/blob/master/lisp/mu-completion.el
(use-package hippie-exp                 ; Powerful expansion and completion
  :bind ("C-c /" . hippie-expand)
  :config
  (setq hippie-expand-try-functions-list '(try-complete-file-name
                                           try-complete-file-name-partially
                                           try-complete-lisp-symbol
                                           try-complete-lisp-symbol-partially
                                           try-expand-all-abbrevs
                                           try-expand-dabbrev-all-buffers
                                           try-expand-dabbrev-from-kill
                                           try-expand-list
                                           try-expand-dabbrev)))

(add-to-list 'completion-styles 'initials t)
   #+END_SRC
** Auto insert templates
#+BEGIN_SRC emacs-lisp
;; (use-package auto-insert
;;   :ensure t
;;   :defer t
;;   :config 
(eval-after-load 'autoinsert
  '(define-auto-insert
     '("\\.\\(CC?\\|cc\\|cxx\\|cpp\\|c++\\)\\'" . "C++ skeleton")
     '("Short description: "
       "/*" \n
       (file-name-nondirectory (buffer-file-name))
       " -- " str \n
       " */" > \n \n
       "#include <iostream>" \n \n
       "int main(int argc, char **argv)" \n
       "{" \n
       > _ \n\n
       "}" > \n)))
;;  )

#+END_SRC

** Swiper, Ivy, Counsel
#+BEGIN_SRC emacs-lisp
   (use-package counsel
  :ensure t
  :bind
  (("M-y" . counsel-yank-pop)
   :map ivy-minibuffer-map
   ("M-y" . ivy-next-line))
  )

(use-package ivy
  :ensure t
  :diminish (ivy-mode)
  :bind (("C-x b" . ivy-switch-buffer))
  :config
  (ivy-mode 1)
  (setq ivy-use-virtual-buffers t)
  (setq ivy-count-format "%d/%d ")
  (setq ivy-display-style 'fancy))

(use-package swiper
  :ensure t
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (global-set-key "\C-s" 'swiper)
    (global-set-key (kbd "C-c C-r") 'ivy-resume)
    (global-set-key (kbd "<f6>") 'ivy-resume)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    (global-set-key (kbd "<f1> f") 'counsel-describe-function)
    (global-set-key (kbd "<f1> v") 'counsel-describe-variable)
    (global-set-key (kbd "<f1> l") 'counsel-load-library)
    (global-set-key (kbd "<f2> i") 'counsel-info-lookup-symbol)
    (global-set-key (kbd "<f2> u") 'counsel-unicode-char)
    (global-set-key (kbd "C-c g") 'counsel-git)
    (global-set-key (kbd "C-c j") 'counsel-git-grep)
    (global-set-key (kbd "C-c k") 'counsel-ag)
    (global-set-key (kbd "C-x l") 'counsel-locate)
    (global-set-key (kbd "C-S-o") 'counsel-rhythmbox)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)
    ))
   
#+END_SRC

* LaTeX
** Auctex for latex
  Based on https://github.com/Schnouki/dotfiles/blob/master/emacs/init-20-tex.el
  #+BEGIN_SRC emacs-lisp
  (use-package tex  
  :ensure auctex
  :mode ("\\.tex\\'" . LaTeX-mode)
  :commands (latex-mode LaTeX-mode plain-tex-mode)
  :init 
  (progn
    (add-hook 'LaTeX-mode-hook 'LaTeX-preview-setup)
    (add-hook 'LaTeX-mode-hook 'yas-global-mode)
    (add-hook 'LaTeX-mode-hook 'flyspell-mode)
    (add-hook 'LaTeX-mode-hook 'auto-fill-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
    (add-hook 'latex-mode-hook 'turn-on-reftex)
    (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
    (add-hook 'LaTeX-mode-hook 'turn-on-orgtbl)
    (add-hook 'Latex-mode-hook 'turn-on-orgtbl)
    (add-hook 'latex-mode-hook 'turn-on-orgtbl)
    (add-hook 'TeX-mode-hook 'turn-on-orgtbl)
    (add-hook 'LaTeX-mode-hook 'turn-on-auto-fill)
    ;;(add-hook 'LaTeX-mode-hook 'latex-extra-mode)
    (add-hook 'LaTeX-mode-hook #'TeX-fold-mode) ;; Automatically activate TeX-fold-mode. C-c C-o C-b
    (add-hook 'latex-mode-hook #'TeX-fold-mode) ;; Automatically activate TeX-fold-mode.
    (add-hook 'TeX-mode-hook #'TeX-fold-mode) ;; Automatically activate TeX-fold-mode.
    (add-hook 'LaTeX-mode-hook   (lambda () (TeX-fold-mode 1))); Automatically activate TeX-fold-mode.
    (setq TeX-auto-save t
	  TeX-parse-self t
	  TeX-save-query nil
	  TeX-electric-math '("$" . "$")
	  TeX-electric-sub-and-superscript 1
	  TeX-source-correlate-method 'auto
	  TeX-source-correlate-start-server t
	  LaTeX-electric-left-right-brace t
	  ;;TeX-electric-escape 1
	  TeX-insert-braces 1
	  ;;TeX-insert-braces 1
	  TeX-PDF-mode t)))
(setq-default TeX-master nil)

(add-hook 'LaTeX-mode-hook
	  (lambda()
	    (local-set-key [C-tab] 'TeX-complete-symbol)))
;;(require 'predictive) ;; need to be installed
;;(add-hook 'LaTeX-mode-hook 'predictive-mode)  
  #+END_SRC

** Reftex
  see : http://www.clarkdonley.com/blog/2014-10-26-org-mode-and-writing-papers-some-tips.html
  #+BEGIN_SRC emacs-lisp
(use-package reftex
  :after latex
  :ensure t
  :commands turn-on-reftex
  :bind ("C-c =" . reftex-toc)
  :init
  (progn
    (setq reftex-plug-into-AUCTeX t)
    (setq LaTeX-label-function (quote reftex-label))
    ;;(reftex-use-external-file-finders t)
    (setq reftex-use-multiple-selection-buffers t)
    ;;(setq reftex-default-bibliography '("./biblio.bib"))
    (setq reftex-default-bibliography
	  (quote
	   ("biblio.bib" "user.bib" "local.bib" "main.bib" "bibliogranular.bib" "books.bib" "bibliogeneral.bib")))
    (setq reftex-bibpath-environment-variables
	    '("./:~/Dropbox/research/granularBiblio/:~/Dropbox/research/"))
    )
  (defun org-mode-reftex-setup ()
    (load-library "reftex")
    (and (buffer-file-name)
	 (file-exists-p (buffer-file-name))
	 (reftex-parse-all))
      (define-key org-mode-map (kbd "C-c (") 'reftex-citation))
  :config
  (add-hook 'LaTeX-mode-hook 'turn-on-reftex)
  (add-hook 'latex-mode-hook 'turn-on-reftex)
  (setq reftex-cite-prompt-optional-args t) ; Prompt for empty optional arguments in cite
  ;; https://www.gnu.org/software/emacs/manual/html_mono/reftex.html
  (setq reftex-enable-partial-scans t)
  (setq reftex-keep-temporary-buffers nil)
  (setq reftex-save-parse-info t)
  (setq reftex-trust-label-prefix '("fig:" "eq:"))
  )  
  #+END_SRC

** Auto-fill for LaTeX
  #+BEGIN_SRC emacs-lisp
  (defun schnouki/latex-auto-fill ()
  "Turn on auto-fill for LaTeX mode."
  (turn-on-auto-fill)
  (set-fill-column 72)
  (setq default-justification 'left))
  (add-hook 'LaTeX-mode-hook #'schnouki/latex-auto-fill)  
  #+END_SRC

** Auctec + latexmk
  #+BEGIN_SRC emacs-lisp
(use-package auctex-latexmk
  :defer t
  :config
  ;; Compilation command
  (add-hook 'LaTeX-mode-hook (lambda () (setq compile-command "latexmk -pdf -pvc")))
  )  
  #+END_SRC
                                                                      
** Improve latex mode
  From : https://thenybble.de/projects/inhibit-auto-fill.html
#+BEGIN_SRC emacs-lisp
(defcustom LaTeX-inhibited-auto-fill-environments
  '("tabular" "tikzpicture") "For which LaTeX environments not to run auto-fill.")
(defun LaTeX-limited-auto-fill ()
  (let ((environment (LaTeX-current-environment)))
    (when (not (member environment LaTeX-inhibited-auto-fill-environments))
      (do-auto-fill))))
(add-hook 'LaTeX-mode-hook
          (lambda () (setq auto-fill-function #'LaTeX-limited-auto-fill)) t)

#+END_SRC

** tikz mode
  latex mode for .tikz files
  #+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.tikz$" . LaTeX-mode))
;; preview tikz with auctex : Command->TeXing Options->PDF Mode from the menu, or press C-c C-t C-p
(eval-after-load "preview"
  '(add-to-list 'preview-default-preamble "\\PreviewEnvironment{tikzpicture}" t)
  )  
  #+END_SRC

** cdlatex mode. NOTE: Generates problems with yasnippet completion
#+BEGIN_SRC emacs-lisp
(use-package cdlatex
  :defer t
  :config
  ;;(add-hook 'LaTeX-mode-hook 'cdlatex-mode)
  (add-hook 'org-mode-hook 'turn-on-org-cdlatex)
  ;; from : https://joaotavora.github.io/yasnippet/faq.html#sec-2 // better this one
  ;; (add-hook 'cdlatex-mode-hook
  ;; 	    (let ((original-command (lookup-key cdlatex-mode-map [tab])))
  ;; 	      `(lambda ()
  ;; 		 (setq yas-fallback-behavior
  ;; 		       '(apply ,original-command))
  ;; 		 (local-(setq )et-key [tab] 'yas-expand))))
  ;; ;; From: ....
  ;; (defun yas/advise-indent-function (function-symbol)
  ;;   (eval `(defadvice ,function-symbol (around yas/try-expand-first activate)
  ;; 	     ,(format
  ;; 	       "Try to expand a snippet before point, then call `%s' as usual"
  ;; 	       function-symbol)
  ;; 	     (let ((yas-fallback-behavior nil))
  ;; 	       (unless (and (called-interactively-p 'interactive)
  ;; 			    (yas-expand))
  ;; 		 ad-do-it)))))
  ;;(yas/advise-indent-function 'cdlatex-tab)
  ;; From : https://emacs.stackexchange.com/questions/29758/yasnippets-and-org-mode-yas-next-field-or-maybe-expand-does-not-expand
  ;;(defun yas-org-very-safe-expand ()
  ;;(let ((yas-fallback-behavior 'return-nil)) (yas-expand)))
  ;;(add-hook 'org-mode-hook
  ;;    (lambda ()
  ;;      (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
  ;;      (define-key yas-keymap [tab] 'yas-next-field)))
  ;;
  ;; from https://tex.stackexchange.com/questions/340591/failed-to-preview-latex-in-emacs
  ;;(defun yas/advise-indent-function (function-symbol)
  ;;  (eval `(defadvice ,function-symbol (around yas/try-expand-first activate)
  ;;           ,(format
  ;;             "Try to expand a snippet before point, then call `%s' as usual"
  ;;             function-symbol)
  ;;           (let ((yas-fallback-behavior nil))
  ;;            (unless (and (called-interactively-p 'interactive)
  ;;                          (yas-expand))
  ;;              ad-do-it))
  ;;)))
  ;;(yas/advise-indent-function 'cdlatex-tab)
  ;;(yas/advise-indent-function 'org-cycle)
  ;;(yas/advise-indent-function 'org-try-cdlatex-tab)
  (add-hook 'org-mode-hook 'yas/minor-mode-on)
  )
#+END_SRC

** magic latex buffer : partial wysiwyg inside emacs 
  #+BEGIN_SRC emacs-lisp
  (use-package magic-latex-buffer 
  :defer t
  :config
  (add-hook 'latex-mode-hook 'magic-latex-buffer)
  )
  #+END_SRC

** latex extra: some conveniences, like section folding
  #+BEGIN_SRC emacs-lisp
  (use-package latex-extra
  :defer t
  :config
  (add-hook 'LaTeX-mode-hook #'latex-extra-mode)
  )  
  #+END_SRC

** [DEACTIVATED] pdf-tools for pre-visuaizing pdf
  #+BEGIN_SRC emacs-lisp
;; (use-package pdf-tools
;;   :config
;;   (pdf-tools-install)
;;   (setq pdf-info-epdfinfo-program "/usr/local/bin/epdfinfo")
;;   ;;(setenv "PKG_CONFIG_PATH" (concat "/usr/local/Cellar/zlib/1.2.8/lib/pkgconfig" ":" "/usr/local/lib/pkgconfig:/opt/X11/lib/pkgconfig"))
;;   (add-hook 'latex-mode-hook 'magic-latex-buffer)
;;   )

;; from : http://emacs.stackexchange.com/questions/21112/making-pdf-tools-work-after-successful-compiling-on-mac-os-x/29846#29846
;; ;; Initialize the package (this should autoload it too)
;; (pdf-tools-install)
;; ;; Select PDF Tools as your viewer for PDF files
;; (setcdr (assq 'output-pdf TeX-view-program-selection) '("PDF Tools"))
;; ;; If you want synctex support, this should be sufficient assuming 
;; ;; you are using LaTeX-mode
;; (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)  
;; PDF tools
;; Update PDF buffers after successful LaTeX runs
;;(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
;;#'TeX-revert-document-buffer)
;; Use pdf-tools to open PDF files
;;(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
;;TeX-source-correlate-start-server t)
;;(unless (assoc "PDF Tools" TeX-view-program-list-builtin)
;;(push '("PDF Tools" TeX-pdf-tools-sync-view) TeX-view-program-list))
;; view generated PDF with `pdf-tools'.
;;(add-to-list 'TeX-view-program-list-builtin
;;'("PDF Tools" TeX-pdf-tools-sync-view))
;;(add-to-list 'TeX-view-program-selection
;;'(output-pdf "PDF Tools"))
;;(load "pdf-tools") ;;for spooling to pdf.
;;(setq output-pdf "PDF Tools") ;; <-- THIS one
;;(pdf-tools-install)
;;(setq TeX-view-program-selection '((output-dvi "Okular")
;;(output-pdf "PDF Tools") ;;
;;))

;; Use pdf-tools to open PDF files
;;(setq TeX-view-program-selection '((output-pdf "PDF Tools"))
;;      TeX-source-correlate-start-server t)

;; Update PDF buffers after successful LaTeX runs
;;(add-hook 'TeX-after-TeX-LaTeX-command-finished-hook
;;	  #'TeX-revert-document-buffer)


;;(setq TeX-view-program-list '(("PDF Viewer" "/Applications/Skim.app/Contents/SharedSupport/displayline -b -g %n %o %b")))
  #+END_SRC

** BIBTEX - helm-bibtex
#+BEGIN_SRC emacs-lisp
(use-package helm-bibtex
  :ensure t
  :mode ("\\.bib" . bibtex-mode)
  :config 
  (setq bibtex-completion-bibliography '("~/Dropbox/teaching/2016-I-USabana/08-ConvocatoriaUSabana/01-Proyecto/biblio-granulometry.bib" "~/Dropbox/teaching/2016-I-USabana/08-ConvocatoriaUSabana/01-Proyecto/bibliogeneral.bib"))
  (helm-delete-action-from-source "Insert BibTeX key" helm-source-bibtex)
  (helm-add-action-to-source "Insert BibTeX key" 'bibtex-completion-insert-key helm-source-bibtex 0)
  )
;; ;; bibtex package
;; (use-package bibtex
;;   :mode ("\\.bib" . bibtex-mode)
;;   :init
;;   (progn
;;     (setq bibtex-align-at-equal-sign t)
;;     (add-hook 'bibtex-mode-hook (lambda () (set-fill-column 120)))))
#+END_SRC

* Selected: count words, upcase, etc, on a region
  #+BEGIN_SRC emacs-lisp
  (use-package selected
  :diminish selected-minor-mode
  :config
  (selected-global-mode t)
  :bind (:map selected-keymap
              ("q" . selected-off)
              ("u" . upcase-region)
              ("d" . downcase-region)
              ("c" . count-words-region)
              ("i" . indent-region)
              ("w" . copy-region-as-kill)
              ("m" . apply-macro-to-region-lines)))

  #+END_SRC

* autopair
  #+BEGIN_SRC emacs-lisp
(use-package autopair
  :defer t
  :config
  (progn (custom-set-variables '(autopair-blink 'nil)))
  (add-hook 'prog-mode-hook 'autopair-global-mode 1)
  (add-hook 'org-mode-hook 'autopair-global-mode 1)
  ;;(autopair-global-mode 1)
  )
;;https://github.com/jdreaver/emacs.d/blob/master/org-init.org
;; Turn off in LaTeX
;;(add-hook 'LaTeX-mode-hook
;;#'(lambda ()
;;(autopair-mode -1)))
  
  #+END_SRC

* smartparens
Check: https://github.com/nasseralkmim/.emacs.d/blob/master/init.el#L631
#+BEGIN_SRC emacs-lisp
;; (use-package smartparens
;;   :ensure t
;;   ;;:defer t
;;   ;;:commands smartparens-mode
;;   :config
;;   (add-hook 'prog-mode-hook 'smartparens-mode) ; ; ;
;;   (add-hook 'org-mode-hook 'smartparens-mode) ; ; ;
;;   ;;(add-hook 'latex-mode-hook 'smartparens-mode 1)
;;   (add-hook 'LaTeX-mode-hook 'smartparens-mode 1)
;;   (show-smartparens-global-mode t)
;;   (sp-local-pair 'org-mode "_" "_" )
;;   (sp-local-pair 'org-mode "$" "$" )
;;   (sp-local-pair 'LaTeX-mode "$" "$" )
;;   (sp-local-pair 'LaTeX-mode "\\left(" "\\right)" :trigger "\\l(")
;;   ;; highligh matching brackets
;;   (show-paren-mode 1) 
;;   (setq show-paren-style 'expression)
;;   )
;; ;; Show matching parens (mixed style)
(show-paren-mode t)
;; (setq show-paren-delay 0.0)
;; (setq show-paren-mismatch t)
;; (setq show-paren-style 'parenthesis)	; highlight just parens
;; ;;(setq show-paren-style 'expression) ; highlight entire expression
#+END_SRC

* pages break lines mode with ctrl+q ctrl+l
  #+BEGIN_SRC emacs-lisp
  (use-package page-break-lines
  :defer 5
  :config (global-page-break-lines-mode))
  #+END_SRC

* Helm
** general
  #+BEGIN_SRC emacs-lisp
  (use-package helm 
  :defer t
  :init
  (setq helm-mode-fuzzy-match t)
  (setq helm-completion-in-region-fuzzy-match t)
  (setq helm-candidate-number-list 50)
  :bind (("C-c h" . helm-mini)
	 ("C-h a" . helm-apropos)
	 ("C-x C-b" . helm-buffers-list)
	 ("C-x b" . helm-buffers-list)
	 ("M-y" . helm-show-kill-ring)
	 ("M-x" . helm-M-x)
	 ("C-x c o" . helm-occur)
	 ("C-x c s" . helm-swoop)
	 ("C-x c y" . helm-yas-complete)
	 ("C-x c Y" . helm-yas-create-snippet-on-region)
	 ("C-x c b" . my/helm-do-grep-book-notes)
	 ("C-x c SPC" . helm-all-mark-rings))
  :config
  (setq helm-candidate-number-limit 100)
  (setq enable-recursive-minibuffers t) ;; allows to use Complete at point
  ;; from http://tuhdo.github.io/helm-intro.html
  ;; The default "C-x c" is quite close to "C-x C-c", which quits Emacs.
  ;; Changed to "C-c h". Note: We must set "C-c h" globally, because we
  ;; cannot change `helm-command-prefix-key' once `helm-config' is loaded.
  (global-set-key (kbd "C-c h") 'helm-command-prefix)
  (global-unset-key (kbd "C-x c"))
  ;;
  ;; Remap TAB for completion
  ;; Source: https://emacs.stackexchange.com/questions/33727/how-does-spacemacs-allow-tab-completion-in-helm#38235
  ;; https://writequit.org/denver-emacs/presentations/2016-03-01-helm.html
  (define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action)
  (define-key helm-map (kbd "TAB") #'helm-execute-persistent-action)
  ;; make TAB works in terminal, C-i is tha same as TAB
  (define-key helm-map (kbd "C-i") 'helm-execute-persistent-action)
  ;;
  ;; ;;(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebind tab to run persistent action
  ;;(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB work in terminal
  (define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
  (setq helm-split-window-in-side-p           t ; open helm buffer inside current window, not occupy whole other window
	helm-move-to-line-cycle-in-source     t ; move to end or beginning of source when reaching top or bottom of source.
	helm-ff-search-library-in-sexp        t ; search for library in `require' and `declare-function' sexp.
	helm-scroll-amount                    8 ; scroll 8 lines other window using M-<next>/M-<prior>
	helm-ff-file-name-history-use-recentf t)
  )
(ido-mode -1)
  #+END_SRC

** helm describe bindings
  #+BEGIN_SRC emacs-lisp
  (use-package helm-descbinds
  :defer t
  :bind (("C-h b" . helm-descbinds)
	 ("C-h w" . helm-descbinds)))
	 ;;(require 'helm-config)
  #+END_SRC

** helm-themes : For color themes
  #+BEGIN_SRC emacs-lisp
  (use-package helm-themes
  :defer t
  )
  #+END_SRC

* which-key
  #+BEGIN_SRC emacs-lisp
  (use-package which-key
  :ensure t 
  :init
  (setq which-key-separator " ")
  (setq which-key-prefix-prefix "+")
  :config
  (which-key-mode))  
  #+END_SRC

* smex mode
  #+BEGIN_SRC emacs-lisp
  (use-package smex
  :bind (("M-x" . smex))
  :config
  (smex-initialize)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
  )
  #+END_SRC
  
* Restructed text mode
  #+BEGIN_SRC emacs-lisp
  (use-package rst
  :mode (("\\.rst$" . rst-mode)
	 ("\\.rest$" . rst-mode))
  )

  #+END_SRC

* Color themes
  #+BEGIN_SRC emacs-lisp
  ;; ;; solarized theme
;; (use-package solarized-theme
;; :ensure t :init (load-theme 'solarized-light t)) ;; light | dark

;; zenburn theme
;;(use-package zenburn-theme
;; :init (load-theme 'zenburn t)
;;)

;;(use-package zenburn-theme
;;   :ensure t
;;   )
;;(load-theme 'zenburn t)

;;(load-theme 'deeper-blue t)
;;(load-theme 'wombat t)

(use-package spacemacs-theme
  :defer t
  ;;:init (load-theme 'spacemacs-dark t)
  :init (load-theme 'spacemacs-light t)
  )

;; ;; https://github.com/greduan/emacs-theme-gruvbox
;; (use-package gruvbox-theme
;;   :defer t
;;   :init (load-theme 'gruvbox t)
;;   ;;:init (load-theme 'gruvbox-dark-soft t)
;;   )

;; ;; https://github.com/ogdenwebb/emacs-kaolin-themes
;; (use-package all-the-icons
;;   :ensure t
;;   :defer t)
;; (use-package kaolin-themes
;;   :config
;;   (load-theme 'kaolin-dark t)
;;   ;;(kaolin-treemacs-theme)
;;   )

;; Theme
;;(use-package color-theme
;;  :ensure t
;;  :defer t
;;  )
;; moe
;; (use-package moe-theme
;;   :ensure t
;;   )
;; ;;(moe-light)
;;(moe-dark)

;; (use-package leuven-theme
;;   :defer t
;;   )
;; (load-theme 'leuven t)
;; ;; (use-package leuven-theme-dark
;; ;;   :ensure t
;; ;;   )
;; ;; (load-theme 'leuven-dark t)

;;(use-package color-theme-sanityinc-tomorrow
;;   :ensure t
;;   )
;;(load-theme 'color-theme-sanityinc-tomorrow-day t)
;;(load-theme 'color-theme-sanityinc-tomorrow-niht t)
;;(load-theme 'color-theme-sanityinc-tomorrow-bright t)

;; (use-package dracula-theme
;;   :ensure t
;;   )
;; Theme
;;(use-package doom-themes
;;  :ensure t
;;  :config
;;  (load-theme 'doom-nord)) ;; doom-one doom-dracula doom-nord
  #+END_SRC

* ECB : Emacs code browser
  #+BEGIN_SRC emacs-lisp
  (use-package ecb
  :defer t
  :config
  (global-set-key (kbd "<M-left>") 'ecb-goto-window-methods)
  (global-set-key (kbd "<M-right>") 'ecb-goto-window-edit1)
  )
;;(require 'ecb-autoloads)
  #+END_SRC

* [DEACTIVATED] symon : tiny system monitor
  #+BEGIN_SRC emacs-lisp
  ;; (use-package symon
  ;;   :defer 10
  ;;   :config
  ;;   (symon-mode)
  ;;   )  
  #+END_SRC

* magit : Magic with git inside emacs
  #+BEGIN_SRC emacs-lisp
  (use-package magit
  :bind ("C-c g" . magit-status)
  )
;;(magit-mode)
  #+END_SRC

* rainbow-delimiters
#+BEGIN_SRC emacs-lisp
(use-package rainbow-delimiters
  :defer t
  :config 
  (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'LaTeX-mode-hook #'rainbow-delimiters-mode)
  (add-hook 'org-mode-hook #'rainbow-delimiters-mode)
  )
#+END_SRC

* highlight
  #+BEGIN_SRC emacs-lisp
  (use-package highlight-symbol
  :ensure t
  :commands highlight-symbol-mode
  :init
  (add-hook 'prog-mode-hook #'highlight-symbol-mode)
  (add-hook 'matlab-mode-hook #'highlight-symbol-mode))
(use-package highlight-parentheses
  :ensure t
  :commands highlight-parentheses-mode
  :init
  (add-hook 'prog-mode-hook 'highlight-parentheses-mode)
  (add-hook 'org-mode-hook 'highlight-parentheses-mode)
  (add-hook 'LaTeX-mode-hook 'highlight-parentheses-mode)
  (add-hook 'python-mode-hook 'highlight-parentheses-mode))
  #+END_SRC

* tags for code navigation
  #+BEGIN_SRC emacs-lisp
  (use-package ggtags
  :defer t
  :config 
  (add-hook 'c-mode-common-hook
	    (lambda ()
	      (when (derived-mode-p 'c-mode 'c++-mode 'java-mode)
		(ggtags-mode 1))))
  )

;; deactivated because currently I really dont know if I need it
;; ;; rtags from https://geokon-gh.github.io/.emacs.d/
;; (use-package rtags
;;   :config
;;   (rtags-enable-standard-keybindings)
;;   (setq rtags-autostart-diagnostics t)
;;   (rtags-diagnostics)
;;   (setq rtags-completions-enabled t)
;;   (rtags-start-process-unless-running)
;;   )

  #+END_SRC

* ispell mode and hooks
  #+BEGIN_SRC emacs-lisp
(setq ispell-program-name "/usr/local/bin/aspell")
;; from: https://github.com/kaushalmodi/.emacs.d/blob/master/setup-files/setup-spell.el
(use-package ispell
  :defer 5
  :config
  (setq ispell-highlight-face (quote flyspell-incorrect))
  (progn
    (cond
     ((executable-find "aspell")
      (setq ispell-program-name "aspell")
      ;;(setq ispell-extra-args   '("--sug-mode=ultra"
      ;;"--lang=en_US"))
      )
     
     ;;((executable-find "hunspell")
     ;;(setq ispell-program-name "hunspell")
     ;;(setq ispell-extra-args   '("-d en_US")))
     )

    ;; Save a new word to personal dictionary without asking
    (setq ispell-silently-savep t)
    
    (use-package flyspell
      :init
      (progn
	(setq flyspell-use-meta-tab nil)
	;; Binding for `flyspell-auto-correct-previous-word'
	(setq flyspell-auto-correct-binding (kbd "<f12>")))
      :config
      (progn
	(add-hook 'prog-mode-hook #'flyspell-prog-mode)
	(with-eval-after-load 'auto-complete
	  (ac-flyspell-workaround))
	;; https://github.com/larstvei/dot-emacs#flyspell
	(add-hook 'text-mode-hook #'turn-on-flyspell)
	(add-hook 'LaTeX-mode-hook #'turn-on-flyspell)
	(add-hook 'latex-mode-hook #'turn-on-flyspell)
	(add-hook 'tex-mode-hook #'turn-on-flyspell)
	(add-hook 'org-mode-hook  #'turn-on-flyspell)

	;; Flyspell signals an error if there is no spell-checking tool is
	;; installed. We can advice `turn-on-flyspell' and `flyspell-prog-mode'
	;; to try to enable flyspell only if a spell-checking tool is available.
	(defun modi/ispell-not-avail-p (&rest args)
	  "Return `nil' if `ispell-program-name' is available; `t' otherwise."
	  (not (executable-find ispell-program-name)))
	(advice-add 'turn-on-flyspell   :before-until #'modi/ispell-not-avail-p)
	(advice-add 'flyspell-prog-mode :before-until #'modi/ispell-not-avail-p)
	
	(bind-keys
	 :map flyspell-mode-map
	 ;; Stop flyspell overriding other key bindings
	 ("C-," . nil)
	 ("C-." . nil)
	 ("<C-f12>" . flyspell-goto-next-error)))))
  )
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
;;(add-hook 'LaTeX-mode-hook 'flyspell-prog-mode)
;;(add-hook 'prog-mode-hook 'flyspell-prog-mode)
;;(add-hook 'latex-mode-hook 'flyspell-mode)
;;(add-hook 'latex-mode-hook 'turn-on-flyspell)
;;(add-hook 'LaTeX-mode-hook 'turn-on-flyspell)  
  #+END_SRC

* htmlize for org html source code export
  #+BEGIN_SRC emacs-lisp
  (use-package htmlize
  :defer t
  ;;:ensure t
  )
  #+END_SRC

* w3m browser mode
  inspired from http://beatofthegeek.com/2014/02/my-setup-for-using-emacs-as-web-browser.html
  #+BEGIN_SRC emacs-lisp
  (use-package w3m
  :defer t
  :config
  ;;change default browser for 'browse-url'  to w3m
  (setq browse-url-browser-function 'w3m-goto-url-new-session)
  ;;change w3m user-agent to android
  (setq w3m-user-agent "Mozilla/5.0 (Linux; U; Android 2.3.3; zh-tw; HTC_Pyramid Build/GRI40) AppleWebKit/533.1 (KHTML, like Gecko) Version/4.0 Mobile Safari/5\
33.")
  )
;;(require 'w3m)
  #+END_SRC

* web mode
  #+BEGIN_SRC emacs-lisp
  (use-package web-mode
  :ensure t
  :mode (("\\.html\\'" . web-mode)
         ("\\.css\\'" . web-mode)
         ("\\.js\\'" . web-mode)
         ("\\.mustache\\'" . web-mode))
  :config
  ;; (add-hook 'web-mode-hook 'smartparens-mode)
  ;; (use-package smartparens-html)
  )
  #+END_SRC

* quick access hacker news
  #+BEGIN_SRC emacs-lisp
  (defun hn ()
  (interactive)
  (browse-url "http://news.ycombinator.com"))
  #+END_SRC

* quick access reddit
  #+BEGIN_SRC emacs-lisp
  (defun reddit (reddit)
  "Opens the REDDIT in w3m-new-session"
  (interactive (list
		(read-string "Enter the reddit (default: AskScience): " nil nil "AskScience" nil)))
  (browse-url (format "http://m.reddit.com/r/%s" reddit))
  )
  #+END_SRC

* Search wikipedia
  #+BEGIN_SRC emacs-lisp
  (defun wikipedia-search (search-term)
  "Search for SEARCH-TERM on wikipedia"
  (interactive
   (let ((term (if mark-active
		   (buffer-substring (region-beginning) (region-end))
		 (word-at-point))))
     (list
      (read-string
       (format "Wikipedia (%s):" term) nil nil term)))
   )
  (browse-url
   (concat
    "http://en.m.wikipedia.org/w/index.php?search="
    search-term
    ))
  )
  #+END_SRC

* w3m open site
  #+BEGIN_SRC emacs-lisp
  (defun w3m-open-site (site)
  "Opens site in new w3m session with 'http://' appended"
  (interactive
   (list (read-string "Enter website address(default: w3m-home):" nil nil w3m-home-page nil )))
  (w3m-goto-url-new-session
   (concat "http://" site)))
  #+END_SRC

* esup for profiling emacs startup
  #+BEGIN_SRC emacs-lisp
  (use-package esup
  :ensure t)
;;(require 'esup-child)
;;(require 'cl-lib)
;; 
;; ALSO CAN USE    https://www.emacswiki.org/emacs/ProfileDotEmacs
  #+END_SRC

* Tramp : remote access to files and dirs
  #+BEGIN_SRC emacs-lisp
  (use-package tramp
  :defer t
  :config
  (setq tramp-default-method "ssh")
  (setq tramp-save-ad-hoc-proxies t)
  )
  #+END_SRC

* Camel case words browsed right
  #+BEGIN_SRC emacs-lisp
  (use-package subword
  :defer t
  :diminish subword-mode
  :config
  (global-subword-mode)
  )
  #+END_SRC

* flycheck
  #+BEGIN_SRC emacs-lisp
  (use-package flycheck
  :defer 2
  ;; :init
  ;;(custom-set-variables '(flycheck-indication-mode 'left-fringe))
  :config
  (global-flycheck-mode t)
  (add-hook 'prog-mode-hook 'flycheck-mode)
  (add-hook 'c++-mode-hook 'flycheck-mode)
  (add-hook 'c-mode-hook 'flycheck-mode)
  (add-hook 'sh-mode-hook 'flycheck-mode)
  (add-hook 'latex-mode-hook 'flycheck-mode)
  )
  #+END_SRC

* C++ irony mode and completion
  From http://cachestocaches.com/2015/8/c-completion-emacs/
  #+BEGIN_SRC emacs-lisp
(defun setup-c-clang-options ()
  (setq irony-additional-clang-options (quote ("-std=c11"))))

(defun setup-cpp-clang-options ()
  (setq irony-additional-clang-options (quote ("-std=c++14" "-stdlib=libc++"))))


;;irony from using emacs ep 55
(use-package irony
  :ensure t
  :config
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  )

;; ;; == irony-mode ==
;; (use-package irony
;;   :defer t
;;   :init
;;   (add-hook 'c++-mode-hook 'electric-pair-mode)
;;   (add-hook 'c++-mode-hook 'irony-mode)
;;   (add-hook 'c-mode-hook 'irony-mode)
;;   (add-hook 'objc-mode-hook 'irony-mode)
;;   :config
;;   ;; replace the `completion-at-point' and `complete-symbol' bindings in
;;   ;; irony-mode's buffers by irony-mode's function
;;   (defun my-irony-mode-hook ()
;;     (define-key irony-mode-map [remap completion-at-point]
;;       'irony-completion-at-point-async)
;;     (define-key irony-mode-map [remap complete-symbol]
;;       'irony-completion-at-point-async))
;;   (add-hook 'irony-mode-hook 'my-irony-mode-hook)
;;   (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
;;   (progn
;;     (add-hook 'c++-mode-hook 'setup-cpp-clang-options)
;;     (add-hook 'c-mode-hook 'setup-c-clang-options))
;;   )
  #+END_SRC
  
* Company-mode
  #+BEGIN_SRC emacs-lisp
  (use-package company
  :ensure t
  :defer t
  :commands company-mode
  :init
  (add-hook 'after-init-hook 'global-company-mode)
  ;;(global-company-mode 1)
  ;;:bind ("C-;" . company-complete-common)
  (add-hook 'prog-mode-hook 'company-mode)
  (add-hook 'LaTeX-mode-hook 'company-mode)
  (add-hook 'org-mode-hook 'company-mode)
  ;;:bind ([(tab)] . company-complete-common)
  :config
  (setq company-idle-delay              .1
	company-minimum-prefix-length   2
	company-show-numbers            t
	company-tooltip-limit           20
	company-dabbrev-downcase        nil
	;; company-backends                '((company-irony company-gtags company-rtags company-abbrev company-clang company-files company-capf company-semantic company-cmake)) ;; company-my-backend
	company-backends                '((company-irony company-gtags company-abbrev company-clang company-files company-capf company-semantic company-cmake)) ;; company-my-backend
	;; (define-key c-mode-map  [(tab)] 'company-complete)
	;; (define-key c++-mode-map  [(tab)] 'company-complete)
	;; (add-to-list 'company-backends 'company-c-headers)
	;; (add-to-list 'company-c-headers-path-system "/usr/local/include/c++/5.3.0/")
	)

  (defun tab-indent-or-complete ()
    (interactive)
    (if (minibufferp)
        (minibuffer-complete)
      (if (or (not yas-minor-mode)
              (null (do-yas-expand)))
          (if (check-expansion)
              (company-complete-common)
	    (indent-for-tab-command)))))
  ;; Also these lines are useful to trigger the completion 
  ;; pressing the key you want.
  (global-set-key [backtab] 'tab-indent-or-complete)
  
  ;;   ;; from https://github.com/company-mode/company-mode/wiki/Writing-backends 
  ;;   ;; http://sixty-north.com/blog/writing-the-simplest-emacs-company-mode-backend
  ;;   (require 'cl-lib)
  ;;   (require 'company)
  ;;   ;; (defun company-my-backend (command &optional arg &rest ignored)
  ;;   ;;   (pcase command
  ;;   ;;     (`prefix (company-grab-symbol))
  ;;   ;;     (`candidates (list "woquendo@gmail.com" "william.oquendo@unisabana.edu.co" "wfoquendo@unal.edu.co"))
  ;;   ;;     (`meta (format "This value is named %s" arg)))
  ;;   ;;   )
  ;;   (defun company-simple-backend (command &optional arg &rest ignored)
  ;;     (interactive (list 'interactive))
  ;;     (cl-case command
  ;;       (interactive (company-begin-backend 'company-simple-backend))
  ;;       (prefix (when (looking-back "\N\\>")
  ;;   		(match-string 0)))
  ;;       (candidates (when (equal arg "\N")
  ;;   		    (list "\NumSI{\}{}" "\NumSI" "\NumPre{\}{}")))
  ;;       (meta (format "This value is named %s" arg)))
  ;;     )
  ;;   (defun company-sample-backend (command &optional arg &rest ignored)
  ;;     (interactive (list 'interactive))
  ;;     (cl-case command
  ;;       (interactive (company-begin-backend 'company-sample-backend))
  ;;       (prefix (when (looking-back "pgf\\>")
  ;;   		(match-string 0)))
  ;;       (candidates (when (equal arg "pgf")
  ;;   		    (list "pgfmathsetmacro{\}{}" "\pgfmathrandoninteger{\}{}{}" "\pgfmathsetseed{}")))
  ;;       (meta (format "This value is named %s" arg)))
  ;;     )
  )
;; (add-to-list 'company-backends 'company-my-backend)
;; (add-to-list 'company-backends 'company-simple-backend)
;; (add-to-list 'company-backends 'company-sample-backend)

(use-package company-irony
  :ensure t
  :config
  (add-to-list 'company-backends 'company-irony)
  )

  ;; https://github.com/vspinu/company-math
;;(use-package math-symbol-list
;;  :ensure t
;;)
(use-package company-math
  :requires math-symbol-list
  :ensure t
  :defer t
  :config
  ;; global activation
  (add-to-list 'company-backends 'company-math-symbols-latex)
  (add-to-list 'company-backends 'company-latex-commands)
  )

  ;; jedi commented out since it needs a server an I cannot install it easily on all systems
  ;;(defun my/python-mode-hook ()
  ;;(add-to-list 'company-backends 'company-jedi))
  ;;(add-hook 'python-mode-hook 'my/python-mode-hook)
;(use-package company-jedi
;  :ensure t
;  :config
;  (add-hook 'python-mode-hook 'jedi:setup)
;  )

; complete yasnippets: https://www.reddit.com/r/emacs/comments/bm8r3c/help_how_do_i_get_yasnippet_names_to_show_up_in/
(defun mars/company-backend-with-yas (backends)
      "Add :with company-yasnippet to company BACKENDS.
Taken from https://github.com/syl20bnr/spacemacs/pull/179."
      (if (and (listp backends) (memq 'company-yasnippet backends))
	  backends
	(append (if (consp backends)
		    backends
		  (list backends))
		'(:with company-yasnippet))))

    ;; add yasnippet to all backends
    (setq company-backends
          (mapcar #'mars/company-backend-with-yas company-backends))
  #+END_SRC


* fix-mode, Highlight TODO/FIXME type messages in comments.
  #+BEGIN_SRC emacs-lisp
;(use-package fic-mode
;  :commands fic-mode
;  :diminish fic-mode
;  :config
;  (add-hook 'prog-mode-hook 'turn-on-fic-mode)
;  (add-hook 'LaTeX-mode-hook 'turn-on-fic-mode)
;  )
(use-package fic-mode
  :commands fic-mode
  :ensure t
  :init
  (add-hook 'prog-mode-hook 'fic-mode)
  :config

  (defun fic-view-listing ()
    "Use occur to list related FIXME keywords"
    (interactive)
    (occur "\\<\\(FIXME\\|WRITEME\\|WRITEME!\\|TODO\\|BUG\\):?"))
  )
  #+END_SRC

* clang-format
  #+BEGIN_SRC emacs-lisp
  (use-package clang-format
  :ensure t
  :bind (([C-M-tab] . clang-format-region))
  :commands clang-format clang-format-buffer clang-format-region
  )
  #+END_SRC

* writegood
  #+BEGIN_SRC emacs-lisp
  (use-package writegood-mode
  :ensure t
  )  
  #+END_SRC

* color-identifiers
  Color variables for easy identification, its like a rainbow puked over everything opened in prog-mode-hook.
  #+BEGIN_SRC emacs-lisp
  (use-package color-identifiers-mode
  :defer t
  :config
  (add-hook 'prog-mode-hook 'color-identifiers-mode)
  (add-hook 'LaTeX-mode-hook 'color-identifiers-mode)
  )
  #+END_SRC

* Custom Functions
  - From https://news.ycombinator.com/item?id=22129636
    #+begin_src emacs-lisp
(defun arrayify (start end quote)
  "Turn strings on newlines into a QUOTEd, comma-separated one-liner."
  (interactive "r\nMQuote: ")
  (let ((insertion
	 (mapconcat
	  (lambda (x) (format "%s%s%s" quote x quote))
	  (split-string (buffer-substring start end)) ", ")))
    (delete-region start end)
    (insert insertion)))
    #+end_src
